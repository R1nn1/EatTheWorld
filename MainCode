local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

local window = DrRayLibrary:Load("Rinns Hub", "Default")

local mainTab = DrRayLibrary.newTab("Main Tab", "ImageIdHere")

local autoGrabEnabled = false
local autoEatEnabled = false
local autoSellEnabled = false
local autoBuyMaxSizeEnabled = false
local autoBuySpeedEnabled = false
local autoBuySizeMultiplierEnabled = false
local autoUpgradeEatSpeedEnabled = false
local autoThrowEnabled = false
local aimlockEnabled = false
local lowGravityEnabled = false
local aimlockTarget = nil
local smallRewardEnabled = false

-- Function to handle Auto Grab
local function autoGrab()
    print("Auto Grab function started")
    while autoGrabEnabled do
        local args = {
            [1] = false,
            [2] = false
        }
        game:GetService("Players").LocalPlayer.Character.Events.Grab:FireServer(unpack(args))
        print("Grabbing food")
        wait(0.1)
    end
    print("Auto Grab function ended")
end

-- Function to handle Auto Eat
local function autoEat()
    print("Auto Eat function started")
    while autoEatEnabled do
        game:GetService("Players").LocalPlayer.Character.Events.Eat:FireServer()
        print("Eating food")
        wait(0.1)
    end
    print("Auto Eat function ended")
end

-- Function to handle Auto Sell
local function autoSell()
    print("Auto Sell function started")
    while autoSellEnabled do
        game:GetService("Players").LocalPlayer.Character.Events.Sell:FireServer()
        print("Selling food")
        wait(0.1)
    end
    print("Auto Sell function ended")
end

-- Function to handle AutoBuy MaxSize
local function autoBuyMaxSize()
    print("AutoBuy MaxSize function started")
    local args = { "MaxSize" }
    while autoBuyMaxSizeEnabled do
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args))
        print("Purchasing MaxSize")
        wait(0.1)
    end
    print("AutoBuy MaxSize function ended")
end

-- Function to handle AutoBuy Speed
local function autoBuySpeed()
    print("AutoBuy Speed function started")
    local args = { "Speed" }
    while autoBuySpeedEnabled do
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args))
        print("Purchasing Speed")
        wait(0.1)
    end
    print("AutoBuy Speed function ended")
end

-- Function to handle AutoBuy Size Multiplier
local function autoBuySizeMultiplier()
    print("AutoBuy Size Multiplier function started")
    local args = { "Multiplier" }
    while autoBuySizeMultiplierEnabled do
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args))
        print("Purchasing Size Multiplier")
        wait(0.1)
    end
    print("AutoBuy Size Multiplier function ended")
end

-- Function to handle Auto Upgrade Eat Speed
local function autoUpgradeEatSpeed()
    print("Auto Upgrade Eat Speed function started")
    local args = { "EatSpeed" }
    while autoUpgradeEatSpeedEnabled do
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PurchaseEvent"):FireServer(unpack(args))
        print("Purchasing Eat Speed Upgrade")
        wait(0.1)
    end
    print("Auto Upgrade Eat Speed function ended")
end

-- Function to handle Auto Throw
local function autoThrow()
    print("Auto Throw function started")
    while autoThrowEnabled do
        game:GetService("Players").LocalPlayer.Character.Events.Grab:FireServer()
        print("Grabbing rock")
        wait(2) -- Wait 2 seconds before throwing
        game:GetService("Players").LocalPlayer.Character.Events.Throw:FireServer()
        print("Throwing rock")
    end
    print("Auto Throw function ended")
end

-- Function to handle Low Gravity
local function setLowGravity(state)
    if state then
        game:GetService("Workspace").Gravity = 50 -- Adjust gravity value as needed for low gravity effect
        print("Low Gravity On")
    else
        game:GetService("Workspace").Gravity = 196.2 -- Default gravity
        print("Low Gravity Off")
    end
end

-- Function to change WalkSpeed
local function changeWalkSpeed(speed)
    game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = speed
    print("WalkSpeed set to " .. speed)
end

-- Function to find the closest player
local function findClosestPlayer()
    local players = game:GetService("Players"):GetPlayers()
    local localPlayer = game:GetService("Players").LocalPlayer
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(players) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).magnitude
            if distance < shortestDistance then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end

    return closestPlayer
end

-- Function to aim at the target
local function aimAt(target)
    local localPlayer = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera

    while aimlockEnabled and target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") do
        local targetPosition = target.Character.HumanoidRootPart.Position
        local cameraDirection = (targetPosition - camera.CFrame.Position).unit
        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + cameraDirection)
        wait()
    end
end

-- Function to handle Aimlock
local function aimlock()
    print("Aimlock function started")
    while aimlockEnabled do
        local closestPlayer = findClosestPlayer()
        if closestPlayer ~= aimlockTarget then
            aimlockTarget = closestPlayer
            if aimlockTarget then
                print("Locking onto " .. aimlockTarget.Name)
                coroutine.wrap(aimAt)(aimlockTarget)
            end
        end
        if aimlockTarget and not aimlockTarget.Character or not aimlockTarget.Character:FindFirstChild("HumanoidRootPart") then
            aimlockTarget = nil
        end
        wait(0.1)
    end
    print("Aimlock function ended")
end

-- Function to handle Small Reward
local function smallReward()
    print("Small Reward function started")
    while smallRewardEnabled do
        local args = {
            [1] = game:GetService("Players").LocalPlayer:WaitForChild("SmallReward")
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("RewardEvent"):FireServer(unpack(args))
        print("Claiming small reward")
        wait(0.1)
    end
    print("Small Reward function ended")
end

-- Main Tab Toggles
mainTab.newToggle("Auto Grab", "Grabs the food for you", true, function(toggleState)
    autoGrabEnabled = toggleState
    if toggleState then
        print("Auto Grab On")
        coroutine.wrap(autoGrab)()
    else
        print("Auto Grab Off")
    end
end)

mainTab.newToggle("Auto Eat", "Automatically eats the food for you", true, function(toggleState)
    autoEatEnabled = toggleState
    if toggleState then
        print("Auto Eat On")
        coroutine.wrap(autoEat)()
    else
        print("Auto Eat Off")
    end
end)

mainTab.newToggle("Auto Sell", "Automatically sells the food for you", true, function(toggleState)
    autoSellEnabled = toggleState
    if toggleState then
        print("Auto Sell On")
        coroutine.wrap(autoSell)()
    else
        print("Auto Sell Off")
    end
end)

-- Extra Tab Toggles
local extraTab = DrRayLibrary.newTab("Extra Tab", "ImageIdHere")

extraTab.newToggle("AutoBuy MaxSize", "Upgrades your Max size for you", true, function(toggleState)
    autoBuyMaxSizeEnabled = toggleState
    if toggleState then
        print("AutoBuy MaxSize On")
        coroutine.wrap(autoBuyMaxSize)()
    else
        print("AutoBuy MaxSize Off")
    end
end)

extraTab.newToggle("AutoBuy Speed", "Upgrades your speed for you", true, function(toggleState)
    autoBuySpeedEnabled = toggleState
    if toggleState then
        print("AutoBuy Speed On")
        coroutine.wrap(autoBuySpeed)()
    else
        print("AutoBuy Speed Off")
    end
end)

extraTab.newToggle("Auto Buy Size Multiplier", "Automatically buys size multipliers for you", true, function(toggleState)
    autoBuySizeMultiplierEnabled = toggleState
    if toggleState then
        print("Auto Buy Size Multiplier On")
        coroutine.wrap(autoBuySizeMultiplier)()
    else
        print("Auto Buy Size Multiplier Off")
    end
end)

extraTab.newToggle("Auto Upgrade Eat Speed", "Automatically upgrades your eat speed for you", true, function(toggleState)
    autoUpgradeEatSpeedEnabled = toggleState
    if toggleState then
        print("Auto Upgrade Eat Speed On")
        coroutine.wrap(autoUpgradeEatSpeed)()
    else
        print("Auto Upgrade Eat Speed Off")
    end
end)

extraTab.newToggle("Small Reward", "Automatically claims the small reward", true, function(toggleState)
    smallRewardEnabled = toggleState
    if toggleState then
        print("Small Reward On")
        coroutine.wrap(smallReward)()
    else
        print("Small Reward Off")
    end
end)

-- PvP Tab Toggles
local pvpTab = DrRayLibrary.newTab("PvP Tab", "ImageIdHere")

pvpTab.newToggle("Autothrow", "Throws the Rocks for you", true, function(toggleState)
    autoThrowEnabled = toggleState
    if toggleState then
        print("Auto Throw On")
        coroutine.wrap(autoThrow)()
    else
        print("Auto Throw Off")
    end
end)

pvpTab.newToggle("Aimlock", "Helps you hit rocks better make sure your in first person if your using Auto Throw", true, function(toggleState)
    aimlockEnabled = toggleState
    if toggleState then
        print("Aimlock On")
        coroutine.wrap(aimlock)()
    else
        print("Aimlock Off")
        aimlockTarget = nil
    end
end)

-- Player Tab Toggles and Sliders
local playerTab = DrRayLibrary.newTab("Player Tab", "ImageIdHere")

playerTab.newSlider("WalkSpeed", "Changes your WalkSpeed", 1000, false, function(num)
    changeWalkSpeed(num)
end)

playerTab.newToggle("Low gravity", "Lets you jump higher and fall slower", true, function(toggleState)
    lowGravityEnabled = toggleState
    setLowGravity(toggleState)
end)

print("Script loaded successfully")

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

Notification:Notify(
    {Title = "IMPORTANT", Description = "If any of the toggles are already green turn it off then turn it on for the feature to work black = off green = on"},
    {OutlineColor = Color3.fromRGB(80, 80, 80), Time = 8, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
)
